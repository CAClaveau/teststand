#!/usr/bin/env python


import sys,string
import astropy.io.fits as pyfits
import argparse
import numpy as np

from desispec import io
from desispec.log import get_logger

parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument('-i','--image', type = str, default = None, required = True, nargs="*",
                    help = 'path of raws image fits files')
parser.add_argument('-o','--outfile', type = str, default = None, required = True, 
                    help = 'output median image filename')
parser.add_argument('--camera',type = str, required = True, 
                    help = 'header HDU (int or string)')
parser.add_argument('--bias', type = str, default = None, required=False,
                        help = 'bias image calibration file')

args        = parser.parse_args()
log = get_logger()

print "read images ..."

shape=None
images=[]
for filename in args.image :
    
    print filename

    # collect exposure times
    fitsfile=pyfits.open(filename)
    exptime = fitsfile[0].header["EXPTIME"]
    fitsfile.close()
    
    # read raw data and preprocess them
    img = io.read_raw(filename, args.camera,bias=args.bias,nocosmic=True)
    if shape is None :
        shape=img.pix.shape
    log.info("adding dark %s divided by exposure time %f s"%(filename,exptime))
    images.append(img.pix.ravel()/exptime)


print "compute median image ..."
medimage=np.median(images,axis=0).reshape(shape)

print "write ..."
hdulist=pyfits.HDUList([pyfits.PrimaryHDU(medimage)])
i=0
for filename in args.image :
    hdulist[0].header["INPUT%03d"%i]=filename
    i+=1
hdulist.writeto(args.outfile,clobber="True")


